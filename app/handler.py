from aiogram import F,Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup



import os
router = Router()

class Form(StatesGroup):
    waiting_text = State()
    waiting_word = State()

statuses = {
'status_text':0,
'status_word':0,
}


@router.message(CommandStart())
async def cmd_start(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text='–ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ',callback_data='1')
    await message.answer('–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å‚ùì‚ùì‚ùì',reply_markup=builder.as_markup())


@router.callback_query(F.data == '1')
async def show_sub_menu_after_start_cmd(callback: CallbackQuery):
    await callback.message.delete()
    builder = InlineKeyboardBuilder()
    if statuses['status_text'] == 0:
        builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç üìú", callback_data="text")
    elif statuses['status_text'] == 1:
        builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç üìú", callback_data="text")
    if statuses['status_word'] == 0:
        builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–∫–æ–º–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ üìù", callback_data="word")
    elif statuses['status_word'] == 1:
        builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å–∫–æ–º–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ üìù", callback_data="word")
    builder.button(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="settings")
    builder.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="back_start")
    builder.button(text="–ò—Å–∫–∞—Ç—å üîé", callback_data="back")
    builder.adjust(1)

    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –¥–µ–ª–∞—Ç—åüòÅ', reply_markup=builder.as_markup())

@router.message(F.data == 'Ahaha You cant get in here,nononono')
async def show_sub_menu_cmd(message: Message):
    builder = InlineKeyboardBuilder()
    if statuses['status_text'] == 0:
        builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç üìú", callback_data="text")
    elif statuses['status_text'] == 1:
        builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç üìú", callback_data="text")
    if statuses['status_word'] == 0:
        builder.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–∫–æ–º–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ üìù", callback_data="word")
    elif statuses['status_word'] == 1:
        builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏—Å–∫–æ–º–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ üìù", callback_data="word")
    builder.button(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="settings")
    builder.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="back_start")
    builder.button(text="–ò—Å–∫–∞—Ç—å üîé", callback_data="back")
    builder.adjust(1)

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –¥–µ–ª–∞—Ç—åüòÅ', reply_markup=builder.as_markup())


#–∏–∑–º–µ–Ω–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å text
@router.callback_query(F.data == 'text')
async def ask_input_text(callback: CallbackQuery,state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="back")
    await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª —Å –Ω–∏–º:',reply_markup=builder.as_markup())
    await state.set_state(Form.waiting_text)
#–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message_handler(Form.waiting_text)
async def input_text(message: Message,state: FSMContext):
    if message.text:
        user_text = message.text
        print(user_text)
        statuses['status_text'] = 1
        await show_sub_menu_cmd(message)
        await state.clear()
    elif message.document:
        doc = message.document
        doc_path = f'downloads/{doc.file_name}'
        try:
            await message.document.dow
            await message.reply(f"–§–∞–π–ª {doc.file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

#–∏–∑–º–µ–Ω–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å word
@router.callback_query(F.data == 'word')
async def ask_input_word(callback: CallbackQuery,state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="back")
    await callback.message.edit_text('send search word pls:',reply_markup=builder.as_markup())#–Ω–∞–¥–æ–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞—Ö–∞–¥ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞???
    await state.set_state(Form.waiting_word)
#–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(Form.waiting_word)
async def input_word(message: Message,state: FSMContext):
    user_word = message.text
    print(user_word)
    statuses['status_word'] = 1
    await show_sub_menu_cmd(message)
    await state.clear()


#–Ω–∞–∑–∞–¥
@router.callback_query(F.data == 'back')
async def go_back(callback: CallbackQuery):
    await callback.message.delete()
    await show_sub_menu_cmd(callback.message)

#–Ω–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ä—Ç—É
@router.callback_query(F.data == 'back')
async def go_back(callback: CallbackQuery):
    await callback.message.delete()
    await cmd_start(callback.message)


#–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
@router.callback_query(F.data == 'settings')
async def show_settings(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()

    builder.button(text='–£—á–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞‚úÖ',callback_data='register')
    builder.button(text='–ó–∞–º–µ–Ω–∞‚ùå', callback_data='replace')
    builder.button(text='–¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫‚ùå',callback_data='inexact_search')
    builder.button(text="–ù–∞–∑–∞–¥ üîô", callback_data="back_start")
    builder.button(text='–ü–æ–∏—Å–∫ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ñ–∞–π–ª–∞–º‚ùåüíÄ',callback_data='many_files')
    builder.adjust(2, 2)
    await callback.message.edit_text('–ù–∞—Å—Ç—Ä–æ–π–∫–∏',reply_markup=builder.as_markup())

#—É—á–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞
@router.callback_query(F.data == 'register')
async def off_on_register(callback: CallbackQuery):
    pass
#–∑–∞–º–µ–Ω–∞
@router.callback_query(F.data == 'register')
async def off_on_replace(callback: CallbackQuery):
    pass
#–Ω–µ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
@router.callback_query(F.data == 'inexact_search')
async def off_on_replace(callback: CallbackQuery):
    pass
#–Ω–µ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
@router.callback_query(F.data == 'many_files')
async def off_on_replace(callback: CallbackQuery):
    pass